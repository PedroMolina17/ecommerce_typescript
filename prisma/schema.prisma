// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum typeRoleEnum {
  admin
}

model User {
  id            Int            @id @default(autoincrement())
  userName      String
  email         String         @unique
  image         String?
  publicIdImage String?
  password      String?
  address       String?
  phone         String?
  googleId      String?
  createAt      DateTime       @default(now())
  tokens        Token?
  comment       Comment[]
  Notification  Notification[]
  Rating        Rating[]
  Cart          Cart[]
}

model Admin {
  id            Int          @id @default(autoincrement())
  userName      String
  email         String       @unique
  publicIdImage String?
  password      String?
  address       String?
  phone         String?
  image         String?
  createAt      DateTime     @default(now())
  role          typeRoleEnum @default(admin)
  tokens        Token?
}

model Token {
  id        Int      @id @default(autoincrement())
  userId    Int?     @unique
  adminId   Int?     @unique
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  admin     Admin?   @relation(fields: [adminId], references: [id], onDelete: Cascade)
  token     String
  createAt  DateTime @default(now())
  expiredAt DateTime
}

model Products {
  id                      Int                       @id @default(autoincrement())
  name                    String                    @unique
  description             String
  purchasePrice           Float
  salePrice               Float
  stock                   Int
  status                  Boolean                   @default(true)
  active                  Boolean                   @default(true)
  promotion               Boolean                   @default(false)
  promotionPrice          Float?
  promotionDescription    String?
  categoryId              Int
  brandId                 Int
  rating                  Float                     @default(0)
  crateAt                 DateTime                  @default(now())
  comment                 Comment[]
  category                Category                  @relation(fields: [categoryId], references: [id])
  brand                   Brand                     @relation(fields: [brandId], references: [id])
  technicalDetailsProduct TechnicalDetailsProduct[]
  ImageProduct            ImageProduct[]

  ProductCoverImage ProductCoverImage?
  Rating            Rating[]
  CartItem          CartItem[]
}

model ImageProduct {
  id            Int      @id @default(autoincrement())
  productId     Int
  imageProduct  String
  publicIdImage String?
  createAt      DateTime @default(now())
  product       Products @relation(fields: [productId], references: [id])
}

model ProductCoverImage {
  id            Int      @id @default(autoincrement())
  productId     Int      @unique
  imageProduct  String
  publicIdImage String?
  createAt      DateTime @default(now())
  product       Products @relation(fields: [productId], references: [id])
}

model VariantImageProduct {
  id             Int      @id @default(autoincrement())
  imageProductId Int
  productId      Int
  variantImage   String
  publicIdImage  String
  createAt       DateTime @default(now())
}

model TechnicalDetailsProduct {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  productId   Int
  createAt    DateTime @default(now())
  product     Products @relation(fields: [productId], references: [id])
}

model Category {
  id       Int        @id @default(autoincrement())
  name     String     @unique
  createAt DateTime   @default(now())
  products Products[]
}

model Brand {
  id       Int        @id @default(autoincrement())
  name     String     @unique
  createAt DateTime   @default(now())
  products Products[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId Int
  product   Products @relation(fields: [productId], references: [id])
  comment   String   @db.Text
  createAt  DateTime @default(now())
}

model Notification {
  id               Int      @id @default(autoincrement())
  userId           Int
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  message          String
  read             Boolean  @default(false)
  typeNotification String
  createAt         DateTime @default(now())
}

model Rating {
  id        Int      @id @default(autoincrement())
  productId Int
  userId    Int
  rating    Int
  createAt  DateTime @default(now())
  product   Products @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Cart {
  id       Int        @id @default(autoincrement())
  userId   Int
  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  cartItem CartItem[]
  total    Float      @default(0)

  createAt DateTime @default(now())
}

model CartItem {
  id             Int      @id @default(autoincrement())
  cartId         Int
  cart           Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId      Int
  product        Products @relation(fields: [productId], references: [id])
  quantity       Int
  unitPrice      Float
  totalItemPrice Float
  createAt       DateTime @default(now())
}
