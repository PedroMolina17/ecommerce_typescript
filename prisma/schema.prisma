// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum typeRoleEnum {
  admin
}

model User {
  id       Int       @id @default(autoincrement())
  userName String
  email    String    @unique
  image    String?
  publicIdImage String?
  password String?
  address  String?
  phone    String?
  googleId String?
  createAt DateTime  @default(now())
  tokens   Token?
  comment  Comment[]
}

model Admin {
  id       Int          @id @default(autoincrement())
  userName String
  email    String       @unique
  publicIdImage String?
  password String?
  address  String?
  phone    String?
  image    String?
  createAt DateTime     @default(now())
  role     typeRoleEnum @default(admin)
  tokens   Token?
}

model Token {
  id        Int      @id @default(autoincrement())
  userId    Int?     @unique
  adminId   Int?     @unique
  user      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  admin     Admin?    @relation(fields: [adminId], references: [id], onDelete: Cascade)
  token     String
  createAt  DateTime @default(now())
  expiredAt DateTime
  
}

model Products {
  id                      Int                       @id @default(autoincrement())
  name                    String                    @unique
  description             String
  price                   Float
  stock                   Int
  status                  Boolean                   @default(true)
  image                   String
  promotion               Boolean
  promotionPrice          Float
  promotionDescription    String?
  categoryId              Int
  brandId                 Int
  crateAt                 DateTime                  @default(now())
  comment                 Comment[]
  category                Category                  @relation(fields: [categoryId], references: [id])
  brand                   Brand                     @relation(fields: [brandId], references: [id])
  technicalDetailsProduct TechnicalDetailsProduct[]
}

model TechnicalDetailsProduct {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  productId   Int
  createAt    DateTime @default(now())
  product     Products @relation(fields: [productId], references: [id])
}

model Category {
  id       Int        @id @default(autoincrement())
  name     String     @unique
  createAt DateTime   @default(now())
  products Products[]
}

model Brand {
  id       Int        @id @default(autoincrement())
  name     String     @unique
  createAt DateTime   @default(now())
  products Products[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId Int
  product   Products @relation(fields: [productId], references: [id])
  comment   String
  createAt  DateTime @default(now())
}
